//Code for impledge assignment by Vasu Kumar Miet(B.Tech CSE(AI))
import java.io.*;
import java.util.*;

public class SimpleCompoundWordFinder {

    public static void main(String[] args) {
        // File paths
        String filePath1 = "Input_01.txt";
        String filePath2 = "Input_02.txt";

        // Process each file
        findCompoundWords(filePath1);
        findCompoundWords(filePath2);
    }

    private static void findCompoundWords(String filePath) {
        try {
            // Read all words from the file
            List<String> words = readWordsFromFile(filePath);

            System.out.println("Processing file: " + filePath);

            // Find the longest and second longest compound words
            String longest = "";
            String secondLongest = "";

            for (String word : words) {
                if (isCompoundWord(word, words)) {
                    if (word.length() > longest.length()) {
                        secondLongest = longest; // Update second longest
                        longest = word;          // Update longest
                    } else if (word.length() > secondLongest.length()) {
                        secondLongest = word;    // Update second longest
                    }
                }
            }

            // Print results
            System.out.println("Longest Compound Word: " + longest);
            System.out.println("Second Longest Compound Word: " + secondLongest);
        } catch (IOException e) {
            System.err.println("Error reading file: " + filePath);
        }
    }

    private static List<String> readWordsFromFile(String filePath) throws IOException {
        // Read words from the file into a list
        List<String> words = new ArrayList<>();
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line;
        while ((line = reader.readLine()) != null) {
            words.add(line.trim());
        }
        reader.close();
        return words;
    }

    private static boolean isCompoundWord(String word, List<String> words) {
        // Check if a word can be formed by other words
        for (int i = 1; i < word.length(); i++) {
            String prefix = word.substring(0, i);      // First part of the word
            String suffix = word.substring(i);        // Remaining part of the word
            if (words.contains(prefix) && 
               (words.contains(suffix) || isCompoundWord(suffix, words))) {
                return true;
            }
        }
        return false;
    }
}
